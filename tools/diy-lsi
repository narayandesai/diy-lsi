#!/usr/bin/env python

import argparse, json, os, multiprocessing, sys
import diylsi.inventory
from diylsi.query import do_query, do_id
from diylsi.statistics import do_statistics

def do_inventory():
    parser = argparse.ArgumentParser(prog='diy-lsi inventory',
                                     description="LSI disk inventory")
    parser.add_argument('--diff', help='diff state with stored config',
                        dest='diff', action='store_true')
    parser.add_argument('--data', help='path to data',
                        dest='datadir')

    config = parser.parse_args(sys.argv[2:])

    pool = multiprocessing.Pool(4)

    #d = diylsi.inventory.parse_sas2ircu()
    a = pool.apply_async(diylsi.inventory.parse_mdb_mpt)
    #a = diylsi.inventory.parse_mdb_mpt()
    c = pool.apply_async(diylsi.inventory.parse_iostat)
    #c = diylsi.inventory.parse_iostat()
    pools = pool.apply_async(diylsi.inventory.parse_zpool)
    d = diylsi.inventory.parse_sas2ircu()

    pool.close()
    pool.join()

    sas_data = diylsi.inventory.join_dict(d, a.get(), 'guid')
    enclosures = [e for e in sas_data if e.get('type') == 'enclosure']
    disks = diylsi.inventory.join_dict(c.get(), [e for e in sas_data if e not in enclosures], 'serial')

    try:
        open('/etc/diy-lsi/hardware.js', 'w').write(json.dumps(disks + enclosures, indent=2))
    except:
        print "Failed to write file /etc/diy-lsi/hardware.js"
        sys.exit(1)

    try:
        open('/etc/diy-lsi/pools.js', 'w').write(json.dumps(pools.get(), indent=2))
    except:
        print "Failed to write file /etc/diy-lsi/pools.js"
        sys.exit(1)

def do_resilver():
    parser = argparse.ArgumentParser(prog='diy-lsi resilver',
                                     description="ZFS Resilver tuning")
    parser.add_argument('--fast', help='set high resilver priority',
                        dest='fast', action='store_true')
    parser.add_argument('--regular', help='set regular resilver priority',
                        dest='regular', action='store_true')

    config = parser.parse_args(sys.argv[2:])
    if config['fast']:
        os.system('echo zfs_resilver_delay/W0|mdb -kw')
        os.system('echo zfs_resilver_min_time_ms/W0t3000|mdb -kw')
    elif config['regular']:
        os.system('echo zfs_resilver_delay/W2|mdb -kw')
        os.system('echo zfs_resilver_min_time_ms/W0t300|mdb -kw')
    else:
        os.system("echo zfs_resilver_delay/D|mdb -k")
        os.system("echo zfs_resilver_min_time_ms/D|mdb -k")

if __name__ == '__main__':
    if sys.argv[1] == 'inventory':
        do_inventory()
    elif sys.argv[1] == 'resilver':
        do_resilver()
    elif sys.argv[1] == 'stats':
        do_statistics()
    elif sys.argv[1] == 'query':
        do_query()
    elif sys.argv[1] == 'id':
        do_id()
    else:
        print "Unknown mode %s" % sys.argv[1]
        print "Usage: diy-lsi inventory"
        print "       diy-lsi stats"
        print "       diy-lsi resilver [--fast] [--regular]"
        print "       diy-lsi query key=value"
        print "       diy-lsi id key=value"
        sys.exit(1)
